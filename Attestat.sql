/**
 * Аттестационное задание.
 * Серверная часть работы приложения.
 * Пиццерия.
 */

CREATE DATABASE restaurant;

/************************************************************************************************************************/
/**** Таблицы ***********************************************************************************************************/
/************************************************************************************************************************/


/**
 * Директор
 * Главный администратор 
 * Администратор
 * Главный повар
 * Повар
 * Официант
 * Кассир
 * 
 * Дирктор управляет главным поваром и главным администратором
 * Главный администратор управляет администраторами
 * Администратор управляет персоналом в зале
 * Главный повар управляет поварами
 */
/**** Создание таблицы ДОЛЖНОСТИ ***********/

CREATE TABLE IF NOT EXISTS должности(
	должность_id serial PRIMARY KEY,
	название_должности varchar, 
	часовая_ставка decimal
);


/**** Создание таблицы СОТРУДНИКИ ***********/

CREATE TABLE IF NOT EXISTS сотрудники(
	сотрудник_id serial PRIMARY KEY,
	фамилия varchar,
	имя varchar,
	отчество varchar,	
	должность_id int REFERENCES должности(должность_id)  ON DELETE CASCADE ON UPDATE CASCADE,
	руководитель_id int REFERENCES сотрудники(сотрудник_id) ON DELETE CASCADE ON UPDATE CASCADE);



/**
 * Таблица учёта рабочего времени сотрудников.
 * По поводу приходов и уходов внутри смены это должна учитывать другая таблица
 * например "перерывы" и по итогу вычитает из общего числа часов за смену.
 * Но у нас не завод, где строгая пропусканая система и ТМЦ на 100 млн+
 * у нас ресторан-столовая с общедоступным входом и выходом, без турникетов.
 * Поэтому сотруднки могут выходить и входить так же как поситители. Поэтому контроль за 
 * дисциплиной сотрудников внутри смены лежит на администраторе.
 * На уровне сервера нас интересуют только начало и окончание смены.
 * 
 * У нас два графика:
 * Первый с 10-00 до 19-00 8 часов
 * Второй с 10-00 до 22-00 11 часов * 
 *  
 * 1 Директор 5/2 по 8
 * 1 Главный администратор 5/2
 * 2 Администротора 2/2 по 12
 * 1 Главный повар 5/2 по 8
 * 2 Повара 2/2
 * 4 Официанта 2/2
 * 2 Кассира 2/2
 */
/***** Создание таблицы УЧЁТА РАБОЧЕГО ВРЕМЕНИ ***********/

CREATE TABLE IF NOT EXISTS учёт_рабочего_времени(	-- таблица фактического учёта отработанного времени 
	сотрудник_id int REFERENCES сотрудники(сотрудник_id),	
	день_выхода date,
	время_начала time, -- приходы и уходы внутри смены не учитываются.
	время_окончания time, -- нас интересует только начало и окончание смены.	
	PRIMARY KEY(сотрудник_id, день_выхода));


/**** Создание таблицы ПЛАН ГРАФИК ***********/

CREATE TABLE IF NOT EXISTS план_график( -- планируемое время начала рабочего дня и его окончания
	сотрудник_id int REFERENCES сотрудники(сотрудник_id),	
	день_выхода date,
	время_начала time, -- приходы и уходы внутри смены не учитываются.
	время_окончания time, -- нас интересует только начало и окончание смены.	
	PRIMARY KEY(сотрудник_id, день_выхода));


/**
 * Когда  сотрудник отмечает свой приход запись попадает в таблицу учёта и 
 * срабатывает триггер, который проверяет if время.прихода_факт > время.плана_план то создать запись в журнале.
 * или if время.факт_ухода < время.план_ухода то создать запись в журнал
 */
/**** Создание таблицы ЖУРНАЛ НАРУШЕНИЙ ***********/

CREATE TABLE IF NOT EXISTS журнал_нарушений(
	нарушение_id serial PRIMARY KEY,
	сотрудник_id int REFERENCES сотрудники(сотрудник_id),
	дата_нарушения date,
	сообщение varchar);


/***** Создание таблицы МЕНЮ *******/

CREATE TABLE IF NOT EXISTS меню(
	меню_id int PRIMARY KEY,
	название_меню varchar);


/***** Создание таблицы ГРУППЫ *******/

CREATE TABLE IF NOT EXISTS группы(
	группа_id int PRIMARY KEY,
	название_группы varchar,
	меню_id int REFERENCES меню(меню_id));


/***** Создание таблицы ПРОДУКТЫ *******/

CREATE TABLE IF NOT EXISTS продукты(
	продукт_id serial PRIMARY KEY,
	название_продукта varchar,
	цена decimal,
	группа_id int REFERENCES группы(группа_id));



/**
 * Есть сущность - карта,
 * в экземплярах которой
 * хранятся данные 
 * о конкретном клиенте
 * телефон
 * день рождения
 * персональная скидка
 * и т.д. 
 */
/**** Создание таблицы КАРТЫ ГОСТЕЙ *****/

CREATE TABLE IF NOT EXISTS карты_гостей(
	карта_id serial PRIMARY KEY,
	имя_гостя varchar NOT NULL,
	дата_рождения date NOT NULL,
	номер_телефона varchar UNIQUE NOT NULL CHECK(номер_телефона !=''),
	размер_скидки decimal  DEFAULT 1 CHECK (размер_скидки >= 0.92));


/**
 * Если просят за одним столиком считать отдельно? 
 * нет отграничений по числу и статусу заказов на один столик.
 *  
 * Если просят разбить сумму на нал и пластик? * 
 * Значит два платежа могут относиться к одному заказу. 
 */
/**** Создание таблицы ЗАКАЗЫ *****/

CREATE TABLE IF NOT EXISTS заказы(
	заказ_id serial PRIMARY KEY,
	время_открытия_заказа timestamp,
	столик_номер int,
	официант int REFERENCES сотрудники(сотрудник_id),	
	карта_гостя int REFERENCES карты_гостей(карта_id),
	заказ_открыт boolean DEFAULT TRUE); 
	-- TRUE открыт, FALSE - закрыт. триггер ловит INSERT платежей, 
	-- чтобы закрыть заказ при полной оплате


/**** Создание таблицы ЧТО_ЗАКАЗАНО ****/	
-- многие ко многим
CREATE TABLE IF NOT EXISTS продукты_заказа(
	id serial PRIMARY KEY,
	заказ_id int REFERENCES заказы(заказ_id),
	продукт_id int REFERENCES продукты(продукт_id));

/****
 * Платёж идентифицируется по номеру заказа
 * и времени оплаты.
 * Предполагается, что по одному заказу 
 * в один момент времени 2 платежа существовать не могут.
 */
/**** Создание таблицы ПЛАТЕЖИ *****/	
	
CREATE TABLE IF NOT EXISTS платежи(
	заказ_id int REFERENCES заказы(заказ_id),
	время_платежа timestamp,	
	сумма_платежа decimal,
	кассир int REFERENCES сотрудники(сотрудник_id),
	PRIMARY KEY(заказ_id,время_платежа));
/**********************************************************************************************************************/
/**********************************************************************************************************************/
/**********************************************************************************************************************/





/************************************************************************************************************************/
/**** Простые функции ***************************************************************************************************/
/************************************************************************************************************************/

				
/**** Функция возвращает СЧЁТ НА ОПЛАТУ по номеру заказа ****/
CREATE OR REPLACE FUNCTION счёт_на_оплату(номер_заказа int)
RETURNS TABLE (поле2 varchar, поле3 decimal) AS 
$$
	SELECT 	пр.название_продукта,
			пр.цена 
	FROM продукты_заказа пз JOIN продукты пр ON пз.продукт_id = пр.продукт_id	
	WHERE пз.заказ_id = номер_заказа
		UNION ALL 
	SELECT 	'Cумма без скидки:',
			сумма_без_скидки(номер_заказа)
		UNION ALL 
	SELECT 	'Сумма со скидкой:',
			сумма_со_скидкой(номер_заказа)
		UNION ALL 
	SELECT 	'Внесено средств:',
			уже_оплачено(номер_заказа)
		UNION ALL 
	SELECT 	'Осталось  доплатить:',
			(сумма_со_скидкой(номер_заказа)-уже_оплачено(номер_заказа));		
$$ LANGUAGE SQL STABLE;
/***************************************/


/**** Функция для печати чеков *****/
CREATE OR REPLACE FUNCTION для_печати_чеков(номер_заказа int)
RETURNS TABLE (поле2 varchar, поле3 decimal) AS 
$$
	SELECT *
	FROM платежи пл
	WHERE пл.заказ_id = номер_заказа;
$$ LANGUAGE SQL STABLE;
/*****************************************/


/**** Функция считает сколько нужно оплатить по счёту БЕЗ УЧЁТА СКИДКИ *******/
CREATE OR REPLACE FUNCTION сумма_без_скидки(номер_заказа int)
RETURNS decimal AS 
$$
	SELECT sum(пр.цена)
	FROM продукты_заказа пз JOIN продукты пр ON пз.продукт_id = пр.продукт_id
	WHERE пз.заказ_id = номер_заказа;	
$$ LANGUAGE SQL STABLE;
/****************************************/


/**** Функция возвращает КОЭФФИЦИЕНТ СКИДКИ для выбранного заказа ********/
CREATE OR REPLACE FUNCTION коэфф_скидки(номер_заказа int)
RETURNS decimal AS 
$$
	SELECT кг.размер_скидки										
	FROM заказы за JOIN карты_гостей кг ON за.карта_гостя = кг.карта_id
	WHERE за.заказ_id = номер_заказа;
$$ LANGUAGE SQL STABLE;
/****************************************/


/**** Функция считает сколько нужно оплатить по счёту С УЧЁТОМ СКИДКИ ********/
CREATE OR REPLACE FUNCTION сумма_со_скидкой(номер_заказа int)
RETURNS decimal AS 
$$
	SELECT сумма_без_скидки(номер_заказа)*коэфф_скидки(номер_заказа);
$$ LANGUAGE SQL STABLE;
/****************************************/


/**** Функция считает сколько было оплачено по счёту ************/
--это нужно, если клиент разбивает сумму заказа на нал и пластик
CREATE OR REPLACE FUNCTION уже_оплачено(номер_заказа int)
RETURNS decimal AS 
$$
	SELECT sum(пл.сумма_платежа) 
	FROM платежи пл
	WHERE пл.заказ_id = номер_заказа;	
$$ LANGUAGE SQL STABLE;
/*******************************************/
/*******************************************/
/*******************************************/


/**** Проверка времени прихода по графику для сотрудника *****/
CREATE OR REPLACE FUNCTION время_выхода_по_графику(сотрудник int, день_выхода  date) 
RETURNS time AS 
$sql1$
	SELECT пг.время_начала
	FROM  план_график пг
	WHERE пг.сотрудник_id = сотрудник
	AND 	 пг.день_выхода = день_выхода;
$sql1$ LANGUAGE SQL STABLE;
/***********************/
--для тестов
--SELECT время_выхода_по_графику(1,(now()-INTERVAL'1 day')::date); -- проверка. время выхода директора по графику вчера
/******************************************************************/
/******************************************************************/


/**** Проверка времени ухода по графику для сотрудника *****/
CREATE OR REPLACE FUNCTION время_ухода_по_графику(сотрудник int, день_выхода  date) 
RETURNS time AS 
$sql2$
	SELECT пг.время_окончания
	FROM  план_график пг
	WHERE пг.сотрудник_id = сотрудник
	AND 	 пг.день_выхода = день_выхода;
$sql2$ LANGUAGE SQL STABLE;
/***********************/
--для тестов
--SELECT время_ухода_по_графику(1,(now()-INTERVAL'1 day')::date); -- проверка. время ухода директора по графику вчера
/************************************************************************************************************************/
/************************************************************************************************************************/
/************************************************************************************************************************/





/**********************************************************************************************************************/
/**** Представления ****************************************************************************************************/
/**********************************************************************************************************************/

/**** Представление АССОРТИМЕНТ **********/
CREATE OR REPLACE VIEW ассортимент(
	"Разделы",
	"Группы",
	"Можно заказать",
	"Цена"
) AS 
SELECT 	ме.название_меню,
		гр.название_группы,
		пр.название_продукта,
		пр.цена
FROM меню ме 	JOIN группы гр 	ON ме.меню_id = гр.меню_id
			JOIN продукты пр	ON гр.группа_id = пр.группа_id;
/********************************************************************/
		
		
/**** Представление ПЕРСОНАЛ ********/
CREATE OR REPLACE VIEW персонал AS
SELECT 	сотр.сотрудник_id, 
		сотр.фамилия, 
		долж.название_должности,
		долж.часовая_ставка
FROM сотрудники сотр JOIN должности долж ON сотр.должность_id = долж.должность_id;		
/**************************************************************************************/


/**** Представление НАРУШИТЕЛИ ****/
CREATE OR REPLACE VIEW нарушители(
	"Нарушитель_ID",
	"Фамилия",
	"Должность",
	"Причина",
	"Ответственный",
	"Дата происшествия"
) AS 
SELECT 	жн.сотрудник_id,
		со.фамилия,
		до.название_должности,
		жн.сообщение,
		со2.фамилия,
		жн.дата_нарушения
FROM журнал_нарушений жн JOIN сотрудники со 	ON жн.сотрудник_id = со.сотрудник_id
					JOIN должности до 	ON со.должность_id = до.должность_id
					JOIN сотрудники со2 ON со.руководитель_id = со2.сотрудник_id;
			

/**** Представление ОТКРЫТЫЕ Заказы за столиками *********/	
CREATE OR REPLACE VIEW открытые_заказы(
	"Заказ№",
	"Время открытия",
	"Стол№",
	"Обслуживает",
	"Гость",
	"Итого",
	"Оплачено",
	"Ожидается"
) AS
SELECT 	за.заказ_id, 
		за.время_открытия_заказа,
		за.столик_номер,
		со.фамилия,
		кг.имя_гостя,
		сумма_со_скидкой(за.заказ_id),
		уже_оплачено(за.заказ_id),
		(сумма_со_скидкой(за.заказ_id) - уже_оплачено(за.заказ_id))
FROM заказы за JOIN карты_гостей кг ON за.карта_гостя = кг.карта_id	
			JOIN сотрудники со ON за.официант = со.сотрудник_id 
WHERE за.заказ_открыт = 'true';
/******************************************************************************/

				
/****** Представление ВЫРУЧКА ЗА СЕГОДНЯ **************/
CREATE OR REPLACE VIEW выручка_за_день(
	"Выручка за день"
)
AS
SELECT sum(пл.сумма_платежа) 
FROM платежи пл
WHERE время_платежа > now()::date
AND время_платежа < (now()+interval'1 day')::date;
/**********************************************************************************************************************/
/**********************************************************************************************************************/
/**********************************************************************************************************************/





/************************************************************************************************************************/
/**** Триггерные функции ************************************************************************************************/
/************************************************************************************************************************/
/**
 * Если сотрудник опоздал или ушел раньше, 
 * чем по графику то создаётся  запись
 * в журнале нарушений.
 */
CREATE OR REPLACE FUNCTION персонал_приход()
RETURNS TRIGGER AS 												
$code1$												
BEGIN
	IF (NEW.время_начала > время_выхода_по_графику(NEW.сотрудник_id, NEW.день_выхода)) THEN
		INSERT INTO журнал_нарушений SELECT 	nextval('журнал_нарушений_нарушение_id_seq'), 
										NEW.сотрудник_id,
										NEW.день_выхода,
										'Опоздание. Смена открыта в '||NEW.время_начала;
	END IF;
	RETURN NULL;					
END;															
$code1$ LANGUAGE plpgsql;	

/*******************************/;
CREATE OR REPLACE FUNCTION персонал_уход()
RETURNS TRIGGER  AS 
$code2$
BEGIN 
	IF NEW.время_окончания < время_ухода_по_графику(NEW.сотрудник_id,NEW.день_выхода) THEN 
		INSERT INTO журнал_нарушений SELECT 	nextval('журнал_нарушений_нарушение_id_seq'),
										NEW.сотрудник_id,
										NEW.день_выхода,
										'Сбежал с работы. Закрытие в '||NEW.время_окончания; 
	END IF;
	RETURN NULL;
END;
$code2$ LANGUAGE plpgsql;

/*******************************/;
/**
 * Функция проверяет сумму платежа и сумму, оставшуюся к оплате
 * по нужному заказу. Если платёж гасит оставшуюся сумму, то заказ
 * закрывается. Копейки отбрасываются.
 */
CREATE OR REPLACE FUNCTION закрытие_заказа() 
RETURNS TRIGGER  AS 
$code3$
DECLARE 
odin_rubl int = 1;
BEGIN 
	IF (сумма_со_скидкой(NEW.заказ_id) - уже_оплачено(NEW.заказ_id)) < odin_rubl THEN
		UPDATE заказы за
		SET заказ_открыт = 'false'
		WHERE за.заказ_id = NEW.заказ_id;
	END IF;	
RETURN NULL;
END;
$code3$ LANGUAGE plpgsql;
/************************************************************************************************************************/
/************************************************************************************************************************/
/************************************************************************************************************************/




/************************************************************************************************************************/
/**** Триггеры **********************************************************************************************************/
/************************************************************************************************************************/
CREATE TRIGGER персонал_приход_триггер
AFTER INSERT 
ON учёт_рабочего_времени
FOR EACH ROW 
EXECUTE FUNCTION персонал_приход();
/************************************/
CREATE TRIGGER персонал_уход_триггер
AFTER INSERT 
ON учёт_рабочего_времени
FOR EACH ROW 
EXECUTE FUNCTION персонал_уход();
/************************************/
CREATE TRIGGER закрытие_заказа_триггер
AFTER INSERT 
ON платежи
FOR EACH ROW 
EXECUTE FUNCTION закрытие_заказа();
/***********************************/
SELECT *  -- проверка наличия триггеров в каталоге.
FROM pg_catalog.pg_trigger 
WHERE tgname = 'персонал_приход_триггер' 
OR tgname = 'персонал_уход_триггер' -- должно быть 3 шт.
OR tgname = 'закрытие_заказа_триггер';
/************************************************************************************************************************/
/************************************************************************************************************************/
/************************************************************************************************************************/





/************************************************************************************************************************/
/**** Наполнение таблиц ДАННЫМИ *****************************************************************************************/
/************************************************************************************************************************/

/*****************/	
INSERT INTO должности (должность_id, название_должности, часовая_ставка)
VALUES 	(1,'Директор',500),
		(2,'Главный администратор',300),
		(3,'Главный повар',350),
		(4,'Администратор',200),
		(5,'Повар',200),
		(6,'Официант',200),	
		(7,'Кассир',200);
/*****************/	
INSERT INTO сотрудники(сотрудник_id, фамилия, имя, отчество, должность_id, руководитель_id)
VALUES 	(1,'Куратов','Игорь','Васильевич',1,NULL), 	-- директор  	
		(2,'Пандао','Лев','Давидович',2,1),		-- главный админ		
		(3,'Кюси','Жандю','Хэяоваович',3,1),		-- главный повар		
		(4,'Манилов','Сергей','Иванович',4,2), 		-- администратор		
		(5,'Капустин','Пётр','Леонидович',4,2),		-- администратор			
		(6,'Семёнов','Глеб','Николаевич',5,3),		-- повар	
		(7,'Солодов','Андрей','Дмитриевич',5,3),	-- повар
		(8,'Маврикия','Анна','Австрийская',6,2),	-- официант	
		(9,'Бугрундская','Элеанора','Испанская',6,2),-- официант
		(10,'Богнаре','Жозефина','Бонапартовна',6,2),-- официант
		(11,'Баварская','Изабелла','Мюнхевна',6,2),	-- официант
		(12,'Хитров','Олег','Поликарпович',7,2),	-- кассир
		(13,'Честнов','Антон','Семёнович',7,2);		-- кассир
/***************/
INSERT INTO план_график(сотрудник_id, день_выхода, время_начала, время_окончания)
VALUES	(1,now()-INTERVAL'5 day','10:00','19:00'), -- директор 5/2
		(1,now()-INTERVAL'4 day','10:00','19:00'),
		(1,now()-INTERVAL'3 day','10:00','19:00'),
		(1,now()-INTERVAL'2 day','10:00','19:00'),
		(1,now()-INTERVAL'1 day','10:00','19:00'),
		(2,now()-INTERVAL'5 day','10:00','19:00'),-- главный админ 5/2
		(2,now()-INTERVAL'4 day','10:00','19:00'),
		(2,now()-INTERVAL'3 day','10:00','19:00'),
		(2,now()-INTERVAL'2 day','10:00','19:00'),
		(2,now()-INTERVAL'1 day','10:00','19:00'),
		(3,now()-INTERVAL'5 day','10:00','19:00'), -- главный повар 5/2
		(3,now()-INTERVAL'4 day','10:00','19:00'),
		(3,now()-INTERVAL'3 day','10:00','19:00'),
		(3,now()-INTERVAL'2 day','10:00','19:00'),
		(3,now()-INTERVAL'1 day','10:00','19:00'),		 
		(4,now()-INTERVAL'6 day','10:00','22:00'), -- администратор 1 чётные		
		(4,now()-INTERVAL'4 day','10:00','22:00'),		
		(4,now()-INTERVAL'2 day','10:00','22:00'),		
		(5,now()-INTERVAL'7 day','10:00','22:00'), -- администратор 2 нечётные	
		(5,now()-INTERVAL'5 day','10:00','22:00'),	
		(5,now()-INTERVAL'3 day','10:00','22:00'),	
		(5,now()-INTERVAL'1 day','10:00','22:00'),		 
		(6,now()-INTERVAL'6 day','10:00','22:00'), -- повар 1 чётные		
		(6,now()-INTERVAL'4 day','10:00','22:00'),		
		(6,now()-INTERVAL'2 day','10:00','22:00'),		
		(7,now()-INTERVAL'7 day','10:00','22:00'), -- повар 2 нечётные		
		(7,now()-INTERVAL'5 day','10:00','22:00'),		
		(7,now()-INTERVAL'3 day','10:00','22:00'),		
		(7,now()-INTERVAL'1 day','10:00','22:00'),		
		(8,now()-INTERVAL'6 day','10:00','22:00'), -- официант 1 чётные		
		(8,now()-INTERVAL'4 day','10:00','22:00'),		
		(8,now()-INTERVAL'2 day','10:00','22:00'),			
		(9,now()-INTERVAL'6 day','10:00','22:00'), -- официант 2 чётные		
		(9,now()-INTERVAL'4 day','10:00','22:00'),		
		(9,now()-INTERVAL'2 day','10:00','22:00'),		
		(10,now()-INTERVAL'7 day','10:00','22:00'),  -- официант 3 нечётные		
		(10,now()-INTERVAL'5 day','10:00','22:00'),		
		(10,now()-INTERVAL'3 day','10:00','22:00'),		
		(10,now()-INTERVAL'1 day','10:00','22:00'),
		(11,now()-INTERVAL'7 day','10:00','22:00'), -- официант 4 нечётные	
		(11,now()-INTERVAL'5 day','10:00','22:00'),	
		(11,now()-INTERVAL'3 day','10:00','22:00'),	
		(11,now()-INTERVAL'1 day','10:00','22:00'),		
		(12,now()-INTERVAL'6 day','10:00','22:00'),	--кассир 1 -чётные 	
		(12,now()-INTERVAL'4 day','10:00','22:00'),		
		(12,now()-INTERVAL'2 day','10:00','22:00'),		
		(13,now()-INTERVAL'7 day','10:00','22:00'),	--кассир 2 -нечётные	
		(13,now()-INTERVAL'5 day','10:00','22:00'),
		(13,now()-INTERVAL'3 day','10:00','22:00'),		
		(13,now()-INTERVAL'1 day','10:00','22:00');		
/***************/		
INSERT INTO учёт_рабочего_времени(сотрудник_id, день_выхода, время_начала, время_окончания)
VALUES	(1,now()-INTERVAL'5 day','10:00','19:10'), -- директор 5/2
		(1,now()-INTERVAL'4 day','10:20','18:23'),
		(1,now()-INTERVAL'3 day','10:32','19:06'),
		(1,now()-INTERVAL'2 day','09:45','18:41'),
		(1,now()-INTERVAL'1 day','09:55','18:49'),
		(2,now()-INTERVAL'5 day','09:45','19:03'),-- главный админ 5/2
		(2,now()-INTERVAL'4 day','09:48','19:05'),
		(2,now()-INTERVAL'3 day','09:54','19:25'),
		(2,now()-INTERVAL'2 day','09:38','19:01'),
		(2,now()-INTERVAL'1 day','09:46','19:02'),
		(3,now()-INTERVAL'5 day','09:56','19:08'), -- главный повар 5/2
		(3,now()-INTERVAL'4 day','09:54','19:04'),
		(3,now()-INTERVAL'3 day','09:53','19:02'),
		(3,now()-INTERVAL'2 day','09:52','19:01'),
		(3,now()-INTERVAL'1 day','09:51','19:00'),		 
		(4,now()-INTERVAL'6 day','09:52','21:05'), -- администратор 1 чётные		
		(4,now()-INTERVAL'4 day','09:37','21:07'),		
		(4,now()-INTERVAL'2 day','09:52','21:02'),		
		(5,now()-INTERVAL'7 day','09:44','21:12'), -- администратор 2 нечётные	
		(5,now()-INTERVAL'5 day','09:41','21:15'),	
		(5,now()-INTERVAL'3 day','09:19','21:19'),	
		(5,now()-INTERVAL'1 day','09:57','21:14'),		 
		(6,now()-INTERVAL'6 day','10:05','21:04'), -- повар 1 чётные		
		(6,now()-INTERVAL'4 day','09:45','21:34'),		
		(6,now()-INTERVAL'2 day','09:58','21:15'),		
		(7,now()-INTERVAL'7 day','09:59','21:03'), -- повар 2 нечётные		
		(7,now()-INTERVAL'5 day','09:49','21:08'),		
		(7,now()-INTERVAL'3 day','09:46','21:05'),		
		(7,now()-INTERVAL'1 day','09:58','21:07'),		
		(8,now()-INTERVAL'6 day','09:37','21:47'), -- официант 1 чётные		
		(8,now()-INTERVAL'4 day','09:46','21:21'),		
		(8,now()-INTERVAL'2 day','09:43','21:23'),			
		(9,now()-INTERVAL'6 day','09:45','21:09'), -- официант 2 чётные		
		(9,now()-INTERVAL'4 day','10:07','21:21'),		
		(9,now()-INTERVAL'2 day','10:01','21:19'),		
		(10,now()-INTERVAL'7 day','10:28','21:25'),  -- официант 3 нечётные		
		(10,now()-INTERVAL'5 day','10:48','21:07'),		
		(10,now()-INTERVAL'3 day','10:08','21:12'),		
		(10,now()-INTERVAL'1 day','10:01','21:19'),
		(11,now()-INTERVAL'7 day','09:28','21:05'), -- официант 4 нечётные	
		(11,now()-INTERVAL'5 day','09:48','21:01'),	
		(11,now()-INTERVAL'3 day','09:27','21:13'),	
		(11,now()-INTERVAL'1 day','10:05','21:18'),		
		(12,now()-INTERVAL'6 day','10:01','21:08'),	--кассир 1 -чётные 	
		(12,now()-INTERVAL'4 day','09:59','21:06'),		
		(12,now()-INTERVAL'2 day','09:57','21:11'),		
		(13,now()-INTERVAL'7 day','09:22','21:05'),	--кассир 2 -нечётные	
		(13,now()-INTERVAL'5 day','09:21','21:08'),
		(13,now()-INTERVAL'3 day','09:49','21:06'),		
		(13,now()-INTERVAL'1 day','09:45','21:07');	
/*****************/
INSERT INTO меню (меню_id,название_меню)
VALUES 	(1,'Основное'),		
		(2,'Напитки'),
		(3,'Алкоголь'),
		(4,'Десерты'),
		(5,'Добавки'),
		(6,'Приборы');
/*****************/		
INSERT INTO группы (группа_id,название_группы,меню_id)
VALUES 	(1,'Пицца',1),
		(2,'Кесадии',1),
		(3,'Закуски',1),
		(4,'Вода',2),
		(5,'Соки',2),
		(6,'Газировка',2),
		(7,'Энергетики',2),
		(8,'Чай/Кофе',2),
		(9,'Пиво',3),		
		(10,'Чизкейки',4),
		(11,'Кексы',4),
		(12,'Печенье',4),
		(13,'Пончики',4),
		(14,'Соусы',5),
		(15,'Специи',5),
		(16,'Посуда',6),
		(17,'Салфетки',6),
		(18,'Наборы',6);
/*****************/
INSERT INTO продукты (название_продукта, цена, группа_id)
VALUES 	('NEW YORK PIZZA',699,1),
		('Манхэттен',799,1),
		('Гавайи',599,1),
		('Де-Люкс',749,1),
		('Пепперони',749,1),
		('4 Сыра',599,1),
		('Греческая',499,1),
		('Веганская',399,1),
		('Ветчина/Грибы ',699,1),
		('Грибная',599,1),
		('Кесадия Мясная',199,2),	
		('Кесадия Куриная',149,2),	
		('Кесадия Сырная',119,2),	
		('Криветки Фри 8шт',229,3),	
		('Наггетсы 10шт',199,3),
		('Картофель Фри',99,3),	
		('Луковые кольца',99,3),	
		('Сырные палочки',199,3),
		('Аква минерале',99,4),	
		('Бонаква',99,4),	
		('Rich Апельсин',99,5),	
		('Rich Яблоко',99,5),	
		('Rich Виноград',99,5),	
		('Тархун',49,6),	
		('Дюшес',49,6),
		('Буратино',49,6),
		('Burn',149,7),
		('Drive',99,7),		
		('Чёрный чай',49,8),
		('Зеленый чай',49,8),
		('Nescafe 3в1',49,8),
		('Nescafe no sugar',39,8),
		('Esspresso cofe',149,8),
		('Capuchino',199,8),
		('Americano',119,8),
		('Пиво Балтика',149,9), 
		('Пиво Bud',199,9),
		('Пиво Козёл',129,9),
		('Шоколадный чиз',149,10),
		('Сливочный чиз',149,10),
		('Маффин шоколадный',99,11),
		('Маффин с изюмом',99,11),
		('Шоколадное',99,12),
		('Ванильное',99,12),
		('С корицей',119,12),
		('Грэхем',129,12),
		('Почик Ванильный',49,13),
		('Пончик Клубничный',49,13),
		('Пончик шоколадный',49,13),
		('Пончик со сгущенкой',49,13),
		('Кислосладкий соус',29,14),
		('Томатный соус',29,14),
		('Сырный соус',29,14),
		('Чесночный соус',29,14),
		('Горчица',29,15),
		('Соль',19,15),
		('Перец',19,15),
		('Сахар',19,15),
		('Вилки 5шт.',9,16),
		('Ножи 5шт.',9,16),
		('Стаканы 5шт.',9,16),
		('Тарелка 5шт.',9,16),
		('Контейнер 1шт',9,16),
		('Влажные салфетки 15шт.',49,17),
		('Сухие салфетки 40шт.',49,17),
		('Набор(Вилка, Ложка, Тарелка, Салфетки)',29,18),
		('Набор(Зубочистки, Жвачка Orbit)',49,18);	
/*****************/	
INSERT INTO карты_гостей (карта_id, имя_гостя, дата_рождения, номер_телефона, размер_скидки)
VALUES 	(1,'Иванов','01.01.2000','+79512258741', 0.99),
		(2,'Петров','24.04.1994','+79635675214', 0.95),
		(3,'Сидоров','24.04.1994','+7963584154', 0.93),
		(4,'Смирнов','24.04.1994','+7234846214', 0.98),
		(5,'Диденко','24.04.1994','+7135846214', 0.93);
/*****************/	
INSERT INTO заказы(заказ_id, время_открытия_заказа, столик_номер, официант, карта_гостя)
VALUES 	(1, now(),1,8,5),
		(2, now(),3,8,1),
		(3, now(),4,8,3),
		(4, now(),8,8,4),
		(5, now(),2,8,2);

/*****************/	
INSERT INTO продукты_заказа(заказ_id,продукт_id)
VALUES 	(1,1),(1,2),(1,6),(1,11),(1,12),(1,13),(1,14),(1,15),(1,16),(1,21),(1,26),(1,34),(1,47),(1,48),(1,49);
/*****************/	
INSERT INTO продукты_заказа(заказ_id,продукт_id)
VALUES 	(2,3),(2,4),(2,16),(2,18),(2,23),(2,29),(2,39),(2,40),(2,45),(2,46),(2,52),(2,54),(2,65),(2,64),(2,67);
/*****************/	
INSERT INTO продукты_заказа(заказ_id,продукт_id)
VALUES 	(3,2),(3,1),(3,10),(3,15),(3,25),(3,28),(3,30),(3,35),(3,33),(3,15),(3,36),(3,22),(3,60),(3,59),(3,58);
/*****************/
INSERT INTO продукты_заказа(заказ_id,продукт_id)
VALUES 	(4,4),(4,5),(4,6),(4,14),(4,15),(4,21),(4,25);
/*****************/
INSERT INTO продукты_заказа(заказ_id,продукт_id)
VALUES 	(5,5),(5,5),(5,17),(5,19),(5,24),(5,30),(5,31),(5,32),(5,33),(5,34),(5,35),(5,55),(5,66),(5,65),(5,66);
/*****************/	
/*****************/	
INSERT INTO платежи (заказ_id, время_платежа,сумма_платежа,кассир)
VALUES 	(1, current_timestamp,1500,12);     
/*****************/
INSERT INTO платежи (заказ_id, время_платежа,сумма_платежа,кассир)
VALUES 	(2, current_timestamp,2519,12);  
/*****************/
INSERT INTO платежи (заказ_id, время_платежа,сумма_платежа,кассир)
VALUES 	(3, current_timestamp,500,12);  
/************************************************************************************************************************/		
/************************************************************************************************************************/			
/************************************************************************************************************************/		

	
	
	
	
/************************************************************************************************************************/
/**** Проверка ПРЕДСТАВЛЕНИЙ, наполнения ТАБЛИЦ, работы ТРИГГЕРОВ и ФУНКЦИЙ *********************************************/
/************************************************************************************************************************/
	

/**** Проверка наполнения ТАБЛИЦ ****/	
SELECT * FROM должности;
SELECT * FROM сотрудники;
SELECT * FROM учёт_рабочего_времени;
SELECT * FROM план_график;
SELECT * FROM журнал_нарушений; -- триггеры сработали?
SELECT * FROM меню;
SELECT * FROM группы;
SELECT * FROM продукты;
SELECT * FROM карты_гостей;
SELECT * FROM заказы;
SELECT * FROM платежи;
/***************************************/


/**** Проверка работы ПРЕДСТАВЛЕНИЙ ****/
SELECT * FROM ассортимент; 
SELECT * FROM персонал;
SELECT * FROM нарушители;
SELECT * FROM открытые_заказы; 
SELECT * FROM выручка_за_день;
/***************************************/


/**** Проверка работы ТРИГГЕРОВ *****************************************************/
/**** Добавление записей в журнал нарушений ***/
INSERT INTO план_график(сотрудник_id, день_выхода, время_начала, время_окончания)
VALUES (13,now(),'10:00','22:00'); -- создадим в план-графике запись о том, 
							-- что кассир№2 выходит сегодня на работу.
INSERT INTO учёт_рабочего_времени (сотрудник_id, день_выхода, время_начала, время_окончания)
VALUES (13,now(),'10:05','21:55'); -- кассир №2 выходит, но опазывает на 5 минут
							-- и на 5 мин раньше сбегает с рабочего места.
SELECT * FROM журнал_нарушений WHERE сотрудник_id = 13; -- тут мы видим фиксацию нарушений, 
											 -- при открытии и закрытии смен работников.
/****************************************************************/
/**** Закрытие заказа после оплаты ************/
SELECT * FROM открытые_заказы; 

INSERT INTO платежи (заказ_id, время_платежа,сумма_платежа,кассир)
VALUES 	(4, current_timestamp,2000,12); -- внесём часть суммы, проверим статус   

SELECT * FROM открытые_заказы; 

INSERT INTO платежи (заказ_id, время_платежа,сумма_платежа,кассир)
VALUES 	(4, current_timestamp,619,12); -- внесём оставшуюся часть, 619 руб, без учёта копеек.  

SELECT * FROM открытые_заказы; -- заказ закрыт.
SELECT * FROM заказы;		-- галочка стоит только напротив открытых.
/**************************************************************************/


/**** Проверка работы функций **********/
SELECT сумма_без_скидки(1);	-- всего к оплате для заказа 1
SELECT уже_оплачено(1);		-- сколько оплатили за заказ 1
SELECT счёт_на_оплату(1);	-- счёт с детальной информацией

SELECT сумма_без_скидки(2); 	
SELECT уже_оплачено(2);		
SELECT счёт_на_оплату(2);

SELECT сумма_без_скидки(3); 	
SELECT уже_оплачено(3);			
SELECT счёт_на_оплату(3);	
/************************************/


/**********************************************************************************************************************/
/******* ДЛЯ ДРОПОВ ***************************************************************************************************/
/**********************************************************************************************************************/
DROP TABLE IF EXISTS учёт_рабочего_времени;
DROP TABLE IF EXISTS план_график; 
DROP TABLE IF EXISTS журнал_нарушений cascade; 
DROP TABLE IF EXISTS должности cascade;
DROP TABLE IF EXISTS сотрудники cascade;
DROP TABLE IF EXISTS продукты cascade;
DROP TABLE IF EXISTS группы cascade;
DROP TABLE IF EXISTS меню cascade;
DROP TABLE IF EXISTS карты_гостей cascade;
DROP TABLE IF EXISTS заказы cascade;
DROP TABLE IF EXISTS платежи cascade;
DROP TABLE IF EXISTS продукты_заказа cascade;
/************************************************/
TRUNCATE сотрудники, должности;
TRUNCATE учёт_рабочего_времени, план_график;
TRUNCATE журнал_нарушений;
TRUNCATE меню, группы, продукты cascade;
TRUNCATE заказы, карты_гостей, платежи;
TRUNCATE продукты_заказа;
/***********************************************/
DROP FUNCTION закрытие_заказа(); 
DROP FUNCTION уже_оплачено(int);
DROP FUNCTION сумма_без_скидки(int);
DROP FUNCTION сумма_со_скидкой(int);
DROP FUNCTION счёт_на_оплату(int);
DROP FUNCTION время_выхода_по_графику(int,date);
DROP FUNCTION время_ухода_по_графику(int,date);
DROP FUNCTION персонал_приход();
DROP FUNCTION персонал_уход();
DROP TRIGGER персонал_приход_триггер ON учёт_рабочего_времени;
DROP TRIGGER персонал_уход_триггер ON учёт_рабочего_времени;
DROP TRIGGER закрытие_заказа_триггер ON платежи;
/***********************************************/
DROP VIEW IF EXISTS персонал;
DROP VIEW IF EXISTS ассортимент;
DROP VIEW IF EXISTS нарушители;
DROP VIEW IF EXISTS открытые_заказы;
DROP VIEW IF EXISTS выручка_за_день;
/***********************************************************************************************************************/
/**********************************************************************************************************************/
/**********************************************************************************************************************/
